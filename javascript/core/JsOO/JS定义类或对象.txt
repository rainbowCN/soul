学过C，写过VB，开发过JAVA&PHP，如果被问到什么语言最难这种大智若愚的问题？我只能告诉你是Javascript！唾手可得的开发环境，让几乎没有编程经验的人都可以无障碍的写出hello world！大多数开发者调试过几段代码，做出几个炫酷效果就会误认为自己的水平很不错。但真相是这样吗？撇下面向过程的数据结构和算法不说，面向实例大行其道的今天，在OOP语言盛兴的时代，面向原型的Javascript&弱类型特质&灵活的语法让学习并构建富+客户端的程序员着实有点发汗！笔者关注Javascript许久，终于加入其阵营，本着学习和探讨为目的，来分享出自己Javascript学习的心得。希望抛砖引玉，予人所需！
今天，我来小结一下Javascript中自定义实例的方式，确切的说是在系统分析之后，抽象出的实体我们如何用Javascript表达出来！这些方式的总结并不足以指导读者如何去构建一个实际的项目，但了解这些是我们庖丁解牛优秀代码的铺路石，是我们真正掌握Javascript的必经之路。Javascript自己就没有定义模板实例属性和方法的概念，所以我们只能以类的最终目的创建实例为成文的出发点。

1、“new Object()”。
如：
var car = new Object();
car.color = "red";
car.showColor = function(){
   console.log(this.color);
}

在以上的代码中，使用“new”关键字创建一个Object的car实例(实例)。然后设置其color属性。最后一个属性实际上是指向函数的指针，意味着该属性是个方法。JSON在客户端与服务器端泛滥后后，其构建实例的方式成为方式一首选的替代方案！代码如下：
car = {
    color: "red",
    showColor: function(){
	console.log(this.color);
    }
}

弊端：
以上两种方式虽然可以创建出实例car，但创建多个实例(成员变量&方法N多)时，则构建代码冗余、复用性较低。在大量生成实例的业务场景下没有应用价值！
解决：
为了解决此问题，引申出创建并返回特定类型实例的工厂函数(factory function)方式。

2、工厂函数
如：
function createCar(sColor) {
	var car = new Object();
	car.color = sColor;
	car.showColor = function(){
	    console.log(this.color)
	}
	return car;		
}
var car1 = createCar("red");
var car2 = createCar("blue");
car1.showColor();		//outputs "red"
car2.showColor();		//outputs "blue"

弊端：
这种方式有效的减少了代码的冗余，但是每次调用createCar()方法，都会创建新函数showColor()，意味着每个实例都有自己的showColor()版本，实际上，每个实例都只需共享同一个函数。
解决：
在工厂函数外定义实例的方法，然后通过属性指向该方法，从而解决内存浪费的问题。

function showColor() {
	console.log(this.color)
}
function createCar(sColor) {
	var car = new Object();
	car.color = sColor;
	car.showColor = showColor;
	return car;		
}
var car1 = createCar("red");
var car2 = createCar("blue");
car1.showColor();		//outputs "red"
car2.showColor();		//outputs "blue"

弊端：
非常遗憾的是改良后的工厂方法没有解决对象识别的问题，就是创建的实例你无法通过instanceof出他是那个类型的对象。因为他们都通过Object new出来的！
解决：
ECMAScript中的construcotr可用来创建特定类型的对象，所以构造函数模式可以解决上述的问题！

3、构造函数
function showColor() {
	console.log(this.color)
}
function Car(sColor) {
	this.color = sColor;
	this.showColor = function() {
		console.log(this.color)
	}
}
var car1 = new Car("red");
var car2 = new Car("blue");
上面的代码的与工厂方法的区别：1、没有显式的创建对象。2、直接将成员变量和方法赋给了this。3、没有return语句。实际上当使用new创建Car的实例时，构造函数会隐式的经历如下4步：1、创建一个Car的新实例。2、将this指向新实例。3、执行成员变量和属性的赋值。4、return回这个新实例。car1和car2最后分别保存着Car的不同实例，但是两个对象都存在一个共同指向Car的constructor属性。对象的constructor最初就是用来识别对象类型的。所以console.log(car1 instanceof Car)//ture解决了工厂方法遗留的问题。
弊端：
是不是showColor()有点碍眼？全局作用局的showColor()实际上只是为某一个类的实例服务，除了有背面向对象封装特性之外。一个稍具规模的系统都会使全局函数的数量和维护变得让人头疼。
解决：
ECMAScript中每个函数都有一个prototype属性，这个指针属性指向一个对象。而这个对象的用途是包含特定类型的所有实例共享的属性和方法。这不就是我们所追求的类吗？累不累啊？

4、原型方式
function Car() {
}
Car.prototype.color = "red";
Car.prototype.showColor = function() {
	console.log(this.color)
}
var car1 = new Car();
var car2 = new Car();

这样我们不必在构造函数中定义对象的成员变量和方法。直接添加到具有类特性的原型对象上。与构造函数不同的是，空构造函数创建实例的成员变量和方法由所有的实例共享。console.log(car1.showColor==car2.showColor); //ture可以验证。Javascript作用域与原型对象有着密切关联，这里不在此展讨论，请参见《Javascript那些事之作用域》。

弊端：
使用原型方式时，不能通过给构造函数传递参数初始化属性的值。这意味着必须在实例创建后才能改变属性的默认值。真正的问题是原型中的所有属性被很多实例共享，基本值属性、函数共享不会造成任何问题，但引用类型的属性是被多个实例共享是个大Trouble！
function Car() {
}
Car.prototype.color = "red";
Car.prototype.dirvers = new Array("Mike", "Sue");
Car.prototype.showColor = function() {
	console.log(this.color)
}
var car1 = new Car();
var car2 = new Car();
car1.dirvers.push("Matt");

alert(car1.drivers);	//ouputs "Mike,Sure,Matt"
alert(car2.drivers);	//ouputs "Mike,Sure,Matt"
解决：
由于drivers是引用值，Car的两个实例指向同一个数组。由于创建实例时有这么多问题，所以需要联合使用构造函数和原型方式。


5、混合的构造函数/原型方式
即用构造函数定义实例的所有非函数属性，用原型方式定义实例的函数属性(方法)。结果所有的函数都只创建一次，而每个实例都具有自己的实例属性实例。
function Car(sColor, iDoors) {
	this.color = sColor;
	this.doors = iDoors;	
	this.dirvers = new Array("Mike", "Sue");
	this.showColor = function() {
		console.log(this.color)
	}
}
Car.prototype.showColor = function() {
	console.log(this.color)
}
var oCar1 = new Car("red",4);
var oCar2 = new Car("blue",4);
oCar1.dirvers.push("Matt");

alert(oCar1.drivers);	//ouputs "Mike,Sure,Matt"
alert(oCar2.drivers);	//ouputs "Mike,Sure"

问题：
在构造函数内存中找属性，在其外部找方法的做法不合理。
解决：
动态原型

6、动态原型方法
function Car(sColor, iDoors) {
	this.color = sColor;
	this.doors = iDoors;	
	this.dirvers = new Array("Mike", "Sue");

	if(typeof Car._initialized == “undefined”) {
		Car.prototype.showColor = function() {
			console.log(this.color)
		}
	}
	Car._initialized = true;
}

7、混合工厂方式
如：
function Car() {
	var oTempCar = new object;
	oTempCar.color = "red";
	oTempCar.doors = 4;
	oTempCar.showColor = function(){
		console.log(this.color)
	}
	return OTempCar;		
}
var car = new Car();

问题：
不能应用动态原型方法的变通方法。它的目的是创建假构造函数，只返回另一种实例的新实例。与工厂方法不同，这种方式使用new运算符，使它看起来像真正的构造函数：由于在Car()构造函数内部调用了new 运算符，所以将忽略第二个new运算符(位于构造函数之外)。在构造函数内部创建的实例被传递回变量var。这种方式在实例方法的内部管理方面与工厂方法有着相同的问题。


目前采用的方式：

1、目前使用最广泛的是混合的构造函数/原型方式。还有动态原型方法也很流行。

